---
- name: Debug ansible_os_family and ansible_distribution
  ansible.builtin.debug:
    msg: "OS Family: {{ ansible_os_family }}, Distribution: {{ ansible_distribution }}"

- name: Determine OS family for package installation
  ansible.builtin.set_fact:
    os_family: "{{ 'Fedora' if ansible_distribution == 'Fedora' else ansible_os_family }}"

- name: Debug os_family
  ansible.builtin.debug:
    var: os_family

- name: Debug packages
  ansible.builtin.debug:
    msg: "Packages are already installed, skipping installation"

- name: Check SELinux status
  ansible.builtin.command:
    cmd: getenforce
  register: selinux_status
  changed_when: false

- name: Check Secure Boot status
  ansible.builtin.command:
    cmd: mokutil --sb-state
  register: secureboot_status
  changed_when: false
  ignore_errors: true

- name: Set signing required fact
  ansible.builtin.set_fact:
    signing_required: "{{ acer_battery_force_signing | default(false) or 
                        (not acer_battery_force_no_signing | default(false) and
                         (selinux_status.stdout == 'Enforcing' or 
                          'SecureBoot enabled' in secureboot_status.stdout)) }}"

- name: Debug signing status
  ansible.builtin.debug:
    msg: "Module signing is {{ 'required' if signing_required else 'not required' }} (SELinux: {{ selinux_status.stdout }}, Secure Boot: {{ 'enabled' if 'SecureBoot enabled' in secureboot_status.stdout else 'disabled' }})"

- name: Generate MOK key pair
  ansible.builtin.include_tasks: generate-mok-keys.yml
  when: signing_required

- name: Check if acer-wmi-battery directory exists
  ansible.builtin.stat:
    path: "{{ acer_battery_source_dir }}"
  register: source_dir

- name: Get real home directory
  ansible.builtin.shell:
    cmd: "getent passwd $SUDO_USER | cut -d: -f6"
  register: home_dir
  changed_when: false
  become: true

- name: Remove temporary repository if it exists
  ansible.builtin.file:
    path: "/tmp/acer-wmi-battery"
    state: absent
  become: false

- name: Clone acer-wmi-battery repository to temporary location
  ansible.builtin.git:
    repo: "https://github.com/frederik-h/acer-wmi-battery.git"
    dest: "/tmp/acer-wmi-battery"
    version: "{{ acer_battery_version }}"
    accept_hostkey: true
  register: git_clone
  become: false

- name: Create system directory
  ansible.builtin.file:
    path: "{{ acer_battery_source_dir }}"
    state: directory
    mode: '0755'
  when: git_clone.changed
  become: true

- name: Move repository to system directory
  ansible.builtin.shell:
    cmd: "rsync -av --exclude='.git' /tmp/acer-wmi-battery/ {{ acer_battery_source_dir }}/"
  when: git_clone is defined and git_clone.changed
  register: move_repo
  become: true

- name: Clean up temporary repository
  ansible.builtin.file:
    path: "/tmp/acer-wmi-battery"
    state: absent
  when: git_clone.changed
  become: false

- name: Update acer-wmi-battery repository
  ansible.builtin.shell: |
    if [ -d "{{ acer_battery_source_dir }}/.git" ]; then
      cd {{ acer_battery_source_dir }} && git pull origin {{ acer_battery_version }}
    else
      echo "Not a git repository, skipping update"
    fi
  when: source_dir.stat.exists
  register: git_update
  become: true
  ignore_errors: true
  changed_when: git_update.stdout is defined and git_update.stdout != 'Already up to date.' and git_update.stdout != 'Not a git repository, skipping update'

- name: Create scripts directory
  ansible.builtin.file:
    path: "{{ acer_battery_source_dir }}/scripts"
    state: directory
    mode: '0755'
  become: true

- name: Install module signing script
  ansible.builtin.template:
    src: scripts/sign-modules.sh.j2
    dest: "{{ acer_battery_source_dir }}/scripts/sign-modules.sh"
    mode: '0755'
  become: true
  when: signing_required

- name: Install module verification script
  ansible.builtin.template:
    src: scripts/verify-module.sh.j2
    dest: "{{ acer_battery_source_dir }}/scripts/verify-module.sh"
    mode: '0755'
  become: true

- name: Create proper Makefile for kernel module
  ansible.builtin.copy:
    dest: "{{ acer_battery_source_dir }}/Makefile"
    content: |
      obj-m := acer-wmi-battery.o
          
      all:
      	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
      
      clean:
      	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Calculate source code checksum
  ansible.builtin.stat:
    path: "{{ acer_battery_source_dir }}/acer-wmi-battery.c"
  register: source_code

- name: Verify source code integrity
  ansible.builtin.fail:
    msg: "Source code appears to be corrupted (empty or invalid)"
  when: not source_code.stat.exists or source_code.stat.size == 0

- name: Backup source code if not already backed up
  ansible.builtin.copy:
    src: "{{ acer_battery_source_dir }}/acer-wmi-battery.c"
    dest: "{{ acer_battery_source_dir }}/acer-wmi-battery.c.backup"
    remote_src: true
    force: false
  when: source_code.stat.exists == true
  become: true

- name: Install DKMS configuration
  ansible.builtin.template:
    src: dkms.conf.j2
    dest: "{{ acer_battery_source_dir }}/dkms.conf"
    mode: '0644'
  register: dkms_config
  notify: rebuild_module
  become: true

- name: Register with DKMS
  ansible.builtin.command:
    cmd: dkms add -m acer-wmi-battery -v {{ acer_battery_version }}
  register: dkms_add
  changed_when: "'Error' not in dkms_add.stderr"
  failed_when: false
  notify: rebuild_module
  become: true

- name: Build and install module
  ansible.builtin.command:
    cmd: dkms install -m acer-wmi-battery -v {{ acer_battery_version }}
  register: dkms_install
  changed_when: "'Error' not in dkms_install.stderr"
  failed_when: false
  notify: rebuild_module
  become: true

- name: Check if module exists
  ansible.builtin.stat:
    path: "/lib/modules/{{ ansible_kernel }}/updates/dkms/acer-wmi-battery.ko"
  register: module_stat

- name: Check module format
  ansible.builtin.command:
    cmd: file /lib/modules/{{ ansible_kernel }}/updates/dkms/acer-wmi-battery.ko
  register: module_format
  ignore_errors: true
  changed_when: false

- name: Debug module format
  ansible.builtin.debug:
    var: module_format.stdout
  when: module_format is defined and module_format.rc == 0

- name: Restore from backup if build failed
  ansible.builtin.copy:
    src: "{{ acer_battery_source_dir }}/acer-wmi-battery.c.backup"
    dest: "{{ acer_battery_source_dir }}/acer-wmi-battery.c"
    remote_src: true
  when: module_stat.stat.exists == false and source_code.stat.exists == true
  become: true

- name: Fail if module build failed and no backup available
  ansible.builtin.fail:
    msg: "Module build failed and no backup is available to restore from"
  when: module_stat.stat.exists == false and source_code.stat.exists == false

- name: Load module
  ansible.builtin.command:
    cmd: modprobe acer_wmi_battery
  register: modprobe_result
  become: true
  ignore_errors: true

- name: Debug module loading result
  ansible.builtin.debug:
    msg: "{{ 'Module loaded successfully' if modprobe_result.rc == 0 else 'Module failed to load: ' + modprobe_result.stderr }}"

- name: Check kernel module compatibility
  ansible.builtin.shell: dmesg | grep -i 'acer_wmi_battery' || true
  register: dmesg_output
  changed_when: false

- name: Debug kernel messages
  ansible.builtin.debug:
    var: dmesg_output.stdout_lines
  when: dmesg_output.stdout is defined and dmesg_output.stdout | length > 0

- name: Verify module functionality
  ansible.builtin.command:
    cmd: "{{ acer_battery_source_dir }}/scripts/verify-module.sh"
  register: verify_result
  changed_when: false
  failed_when: false

- name: Debug module verification result
  ansible.builtin.debug:
    msg: "{{ 'Module verification successful' if verify_result.rc == 0 else 'Module verification failed: ' + verify_result.stdout }}"

- name: Show success message if module is loaded
  ansible.builtin.debug:
    msg: |
      The Acer WMI Battery module has been successfully installed and loaded.
      You can now control the battery health mode by writing to /sys/bus/wmi/drivers/acer-wmi-battery/health_mode
      0 = Standard Mode (100% charging)
      1 = Battery Health Mode (80% charging limit)
  when: verify_result.rc == 0

- name: Show detailed reboot message if module failed to load
  ansible.builtin.debug:
    msg: |
      The Acer WMI Battery module has been installed but could not be loaded.
      This may be because the module was built for a different kernel version or your hardware is not compatible.
      
      Troubleshooting steps:
      1. Try rebooting your system and then run: sudo modprobe acer_wmi_battery
      2. Check kernel logs for errors: dmesg | grep -i 'acer_wmi_battery'
      3. Verify your laptop model is supported: https://github.com/frederik-h/acer-wmi-battery/blob/main/MODELS.md
      4. If issues persist, try rebuilding the module: sudo dkms remove acer_wmi_battery/main --all && sudo dkms install acer_wmi_battery/main
  when: verify_result.rc != 0

- name: Show MOK enrollment instructions
  ansible.builtin.debug:
    msg: |
      Module signing is required. You need to enroll the MOK key on next boot:
      1. Reboot your system
      2. During boot, you'll be prompted to enroll the MOK key
      3. Select "Enroll MOK"
      4. Select "Continue"
      5. Enter the password: {{ acer_battery_mok_password }}
      6. Select "Yes" to enroll the key
      7. Select "Reboot"
  when: 
    - signing_required
    - mok_key is changed
